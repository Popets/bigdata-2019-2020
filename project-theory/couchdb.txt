1. CouchDb е schema free, document based, дистрибутирана система за управление на бази данни. Уповава се на Erlang OPT
платформата, която силно набляга на надеждност и достъпност(availability). Главната маркетинг стратегия е, че е лесната
за разбиране и използване, дори и за начинаещи web програмисти. Цялат интеракция със системата се случва през стандартни
rest http заявки.

2. Данните в системата се записват под формата на документи. Документ е съвкупност от полета и прикачени документи. Те
имат приемуществото да са готови за запазване в базата без да е нужно да се правят връзки. Преподреждат се автоматично
при триене и добавяне. Документите също съдържат metadata, която се потдържа изцяло от системата. Полетата са уникално
именовани и могат да съдържат различни типове данни: text, number, boolean, lists и други. Документите са индексирани в
binary trees разпределени по име(id).

Views се използват за визуално репрезентиране на датата. Те се създават динамично при изпълнение на заявка. Понеже те се
 създават динамично и могат да използват данни от най-новите активни файлове, те се пазят в отделен файл и не пречат на
 immutability-то на базата. Те се създават ползвайки javascript scripts.


3. CouchDb използва lockless система при която update се извършва от клиент и след това се upload-ва от него. Ако
възникне грешка се гледа времето на заявките, като по-ранната е с предимство. За да се улесни работата на програмистите
CouchDb изолира грешките при заявка, разрешава ги на това ниво и не позволява каскадно разпространие през системата.
Също така поддържа load balancing, без да е нужна конфигурация, но ако се сметне за нужно може да се конфигурира за
специфичната задача, която ще изпълнява. Конфигурацията за scalability е силно лимитирана, но това е с цел
ограничаването на нежеланите поведения в системата и съответно подобряване на надежността й.

Update на документ се случва в две стъпки: първо се запазват всички промени по полетата и индексите синхронно, след
което новия db header се дели на 2 и записва паралелно на диска за първите 4kb, след което записването продължава
синхронно. При авария по време на някоя от стъпките update операцията се забравя и нищо не остава записано в системата.

CouchDb никога не променя данните, а вместо това създава нови записи(replication).

Когато мястото кеото се заема от ненужни данни стане прекалено голямо. Сървъра взима всичката активна информация и я
клонира в нов файл, който вече иползва. Като през цялото време системата не спира работа и заявки могат да се
изпълняват.

Индексирането се извършва върху views понеже те са средството с което се взимат и репрезентират данните. Те се пазят в
отделен документ в който се групират (може да има повече от един design document). Индексите се update-ват автоматично
при промяна на данните в базата, понеже views са динамични. View builder-a използва database sequence ID за да определи
дали трябва да обнови индексирането, като гледа документите в реда в който са пристигнали в базата, което намалява
търсенията на документ в диска и забързва процеса.

Понеже системата е дистрибутирана на peer-based методика и позволява документите да бъдат променени и в offline
състояние, може да възникнат конфликти. Системата позволява присъствието на много документи, които са в конфликт,
но тя определя, кой от тях ще бъде активен и кои ще бъдат маркирани като грешки и съответно върнати за поправка.
Поправката може да бъде направена ръчно или да се определят правила, които да разрешат конфликта автоматично.


4. Идеята на CouchDb е да бъде използвана като дистрибутирана база, която може да работи на всякакви устройства и
платформи, независимо от това дали е устройството е свързано в момента с интернет или не. Желанието на създателите й е
да може да се ползва за система дистрибутирана между всички устройства и апликации на система, включително мобилни
устройства и десктопи. За съжаление, съдейки по статистиките тя се ползва просто като лека версия на NOSQL база която
е лесна за ползване вътрешно фирмено. Рядко се използва за друго освен събиране на данни в опрелена фирма.
